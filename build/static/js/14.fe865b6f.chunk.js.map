{"version":3,"sources":["views/analysisReport/index.jsx"],"names":["useStyles","makeStyles","theme","actionsContainer","display","alignItems","justifyContent","AnalysisReport","useState","EditorState","createEmpty","editorState","setEditorState","convertedContent","setConvertedContent","axios","useAxios","title","subtitle","initialValues","useEffect","console","log","handleEditorChange","state","currentContentAsHTML","convertToHTML","getCurrentContent","convertContentToHTML","uploadImageCallBack","file","Promise","resolve","reject","xhr","XMLHttpRequest","open","setRequestHeader","data","FormData","append","send","addEventListener","response","JSON","parse","responseText","error","enableReinitialize","onSubmit","values","form","options","headers","post","swal","message","icon","handleBlur","handleChange","handleSubmit","isSubmitting","touched","container","spacing","item","xs","md","name","onChange","onBlur","fullWidth","value","id","label","variant","color","margin","style","border","padding","minHeight","borderRadius","onEditorStateChange","toolbar","inline","inDropdown","list","textAlign","link","history","image","uploadCallback","alt","present","mandatory","sx","mt","onClick","endIcon","disabled","dangerouslySetInnerHTML","__html"],"mappings":"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","file":"static/js/14.fe865b6f.chunk.js","sourcesContent":["/* eslint-disable no-underscore-dangle */\nimport { useEffect, useState } from 'react';\nimport { Box, Button, CircularProgress, IconButton, Switch, FormControl, Select, MenuItem, TextField, Grid, Divider } from '@mui/material';\nimport { IconUser, IconArrowRight } from '@tabler/icons';\nimport { format } from 'date-fns';\n\nimport config from 'config';\nimport MainCard from 'ui-component/cards/MainCard';\nimport SubCard from 'ui-component/cards/SubCard';\n// import AddUser from './AddUser';\nimport CommonTable from 'ui-component/Table/CommonTable';\nimport DropDown from 'ui-component/Table/CustomDropDown';\nimport { makeStyles } from '@mui/styles';\nimport { useAxios } from 'hooks';\nimport { Formik } from 'formik';\nimport swal from 'sweetalert';\n\nimport { Editor } from 'react-draft-wysiwyg';\nimport { EditorState } from 'draft-js';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport { convertToHTML } from 'draft-convert';\n\nconst useStyles = makeStyles((theme) => ({\n    actionsContainer: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'end'\n    }\n}));\n\nconst AnalysisReport = () => {\n    const [editorState, setEditorState] = useState(() => EditorState.createEmpty());\n    const [convertedContent, setConvertedContent] = useState('');\n    const classes = useStyles();\n    const [active, setActive] = useState(true);\n    const [loading, setLoading] = useState(true);\n    const [users, setUsers] = useState([]);\n    const [isUpdateTable, setIsUpdateTable] = useState(false);\n    const [open, setOpen] = useState(false);\n    const [searches, setSearches] = useState([]);\n    const [isSearch, setIsSearch] = useState(false);\n    const [previousData, setPreviousData] = useState(null);\n    const [checked, setChecked] = useState(false);\n    const axios = useAxios();\n    const [initialValues, setInitialValues] = useState({\n        title: '',\n        subtitle: ''\n    });\n\n    useEffect(() => {\n        console.log(editorState);\n    }, [editorState]);\n\n    const convertContentToHTML = () => {\n        const currentContentAsHTML = convertToHTML(editorState.getCurrentContent());\n        console.log(currentContentAsHTML);\n        setConvertedContent(currentContentAsHTML);\n    };\n\n    const handleEditorChange = (state) => {\n        setEditorState(state);\n        convertContentToHTML();\n    };\n\n    function uploadImageCallBack(file) {\n        return new Promise((resolve, reject) => {\n            const xhr = new XMLHttpRequest();\n            xhr.open('POST', 'https://api.imgur.com/3/image');\n            xhr.setRequestHeader('Authorization', 'Client-ID ##clientid##');\n            const data = new FormData();\n            data.append('image', file);\n            xhr.send(data);\n            xhr.addEventListener('load', () => {\n                const response = JSON.parse(xhr.responseText);\n                console.log(response);\n                resolve(response);\n            });\n            xhr.addEventListener('error', () => {\n                const error = JSON.parse(xhr.responseText);\n                console.log(error);\n                reject(error);\n            });\n        });\n    }\n\n    return (\n        <>\n            <div>\n                <MainCard title=\"Analysis Report\">\n                    <Formik\n                        initialValues={initialValues}\n                        enableReinitialize\n                        onSubmit={async (values, form) => {\n                            try {\n                                console.log(values);\n                                const options = {\n                                    headers: { 'Access-Control-Allow-Origin': '' }\n                                };\n                                const response = await axios.post(`/customer/register`, values, options);\n                                console.log(response, 'response');\n                                swal(response.data.message, { icon: 'success' });\n                            } catch (err) {\n                                swal(err.response.data.message || 'Something went wrong');\n                            }\n                        }}\n                    >\n                        {({ handleBlur, handleChange, values, handleSubmit, isSubmitting, touched }) => (\n                            <SubCard>\n                                <Grid container spacing={2}>\n                                    <Grid item xs={12} md={8}>\n                                        <TextField\n                                            name=\"title\"\n                                            onChange={handleChange('title')}\n                                            onBlur={() => handleBlur('title')}\n                                            fullWidth\n                                            value={values.title}\n                                            id=\"title\"\n                                            label=\"Title *\"\n                                            variant=\"outlined\"\n                                            color=\"secondary\"\n                                            margin=\"dense\"\n                                        />\n                                    </Grid>\n                                    <Grid item xs={12} md={8}>\n                                        <TextField\n                                            name=\"subtitle\"\n                                            onChange={handleChange('subtitle')}\n                                            onBlur={() => handleBlur('subtitle')}\n                                            fullWidth\n                                            value={values.subtitle}\n                                            id=\"subtitle\"\n                                            label=\"Sub Title *\"\n                                            variant=\"outlined\"\n                                            color=\"secondary\"\n                                            margin=\"normal\"\n                                        />\n                                    </Grid>\n                                    <Grid item xs={12} md={10}>\n                                        <div>\n                                            <div\n                                                style={{\n                                                    border: '1px solid #bfbfbf',\n                                                    padding: '2px',\n                                                    minHeight: '400px',\n                                                    borderRadius: '10px'\n                                                }}\n                                            >\n                                                <Editor\n                                                    editorState={editorState}\n                                                    onEditorStateChange={handleEditorChange}\n                                                    toolbar={{\n                                                        inline: { inDropdown: true },\n                                                        list: { inDropdown: true },\n                                                        textAlign: { inDropdown: true },\n                                                        link: { inDropdown: true },\n                                                        history: { inDropdown: true },\n                                                        image: {\n                                                            uploadCallback: uploadImageCallBack,\n                                                            alt: { present: true, mandatory: true }\n                                                        }\n                                                    }}\n                                                />\n                                            </div>\n                                        </div>\n                                    </Grid>\n                                </Grid>\n                                <Divider />\n                                {/* <Box sx={{ mt: 4, mx: 2, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}> */}\n                                <Button\n                                    sx={{ mt: 4, alignItems: 'center' }}\n                                    onClick={handleSubmit}\n                                    variant=\"contained\"\n                                    endIcon={<IconArrowRight />}\n                                    color=\"secondary\"\n                                    disabled={isSubmitting}\n                                >\n                                    Create\n                                </Button>\n                            </SubCard>\n                        )}\n                    </Formik>\n                    <div dangerouslySetInnerHTML={{ __html: convertedContent }} />\n                </MainCard>\n            </div>\n            {/* <AddUser handleClose={handleClose} open={open} setIsUpdateTable={setIsUpdateTable} /> */}\n        </>\n    );\n};\n\nexport default AnalysisReport;\n"],"sourceRoot":""}