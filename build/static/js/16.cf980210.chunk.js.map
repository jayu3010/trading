{"version":3,"sources":["views/bids/CreateBids.jsx"],"names":["validationSchema","makeStyles","theme","actionsContainer","display","alignItems","justifyContent","Yup","name","required","totalAmount","description","minBid","maxBid","tenure","startTime","min","Date","endTime","when","declaration","CreateBids","useState","bidAmout","max","biddingTimePeriod","start","end","initialValues","enableReinitialize","onSubmit","values","form","headers","console","log","axios","post","then","response","data","swal","message","icon","err","handleBlur","handleChange","errors","handleSubmit","isSubmitting","touched","title","container","spacing","item","xs","md","error","onChange","onBlur","helperText","fullWidth","value","id","label","variant","color","margin","multiline","rows","defaultValue","type","sx","mt","onClick","endIcon","disabled"],"mappings":"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","file":"static/js/16.cf980210.chunk.js","sourcesContent":["/* eslint-disable no-underscore-dangle */\nimport { useEffect, useState } from 'react';\nimport { Button, Divider, Grid, TextField, Switch, Typography } from '@mui/material';\nimport { IconArrowRight, IconX } from '@tabler/icons';\nimport swal from 'sweetalert';\nimport Box from '@mui/material/Box';\nimport { format } from 'date-fns';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport config from 'config';\nimport MainCard from 'ui-component/cards/MainCard';\nimport SubCard from 'ui-component/cards/SubCard';\nimport CommonTable from 'ui-component/Table/CommonTable';\nimport DropDown from 'ui-component/Table/CustomDropDown';\n// import AddUser from './AddUser';\nimport { makeStyles } from '@mui/styles';\nimport axios from 'axios';\nimport { ref } from 'yup';\n\nconst style = {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    maxWidth: '98%',\n    maxHeight: '90vh',\n    overflow: 'auto',\n    transform: 'translate(-50%, -50%)',\n    minWidth: '50%',\n    bgcolor: 'background.paper',\n    borderRadius: '15px',\n    boxShadow: 24,\n    p: 4\n};\n\nconst column = ['Sl. No', 'Name', 'Username', 'Email Id', 'Phone No', 'Wallet Amount', 'Joined On', 'Last Login', 'Actions'];\nconst useStyles = makeStyles((theme) => ({\n    actionsContainer: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'end'\n    }\n}));\nconst phoneRegExp = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\n\nconst validationSchema = Yup.object({\n    name: Yup.string().required('Name of the Bid is required'),\n    totalAmount: Yup.number().required('Total Amount is required'),\n    description: Yup.string().required('Description is required'),\n    minBid: Yup.string().required('Minimum Bid is required'),\n    maxBid: Yup.string().required('Maximum Bid is required'),\n    tenure: Yup.string().required('Tenure is required'),\n    startTime: Yup.date()\n        .min(new Date(), `Select the Date & Time After ${new Date()}`)\n        .required('Time Duration Start Time by User is required'),\n    endTime: Yup.date()\n        .when('startTime', (startTime) => Yup.date().min(startTime, `End Date must be after ${new Date(startTime)}`))\n        .required('Time Duration End Time by User is required'),\n    declaration: Yup.date()\n        .when('startTime', (endTime) => Yup.date().min(endTime, `Declaration Date must be after ${new Date(endTime)}`))\n        .required('Declaration for Time & Date is required')\n});\n\nconst CreateBids = () => {\n    const [initialValues, setInitialValues] = useState({\n        name: '',\n        totalAmount: '',\n        description: '',\n        tenure: '',\n        bidAmout: {\n            min: '',\n            max: ''\n        },\n        biddingTimePeriod: {\n            start: '',\n            end: ''\n        },\n        declaration: ''\n    });\n\n    return (\n        <>\n            {/* <Box sx={style}> */}\n            <Formik\n                initialValues={initialValues}\n                validationSchema={validationSchema}\n                enableReinitialize\n                onSubmit={async (values, form) => {\n                    try {\n                        const options = {\n                            headers: { 'Access-Control-Allow-Origin': '' }\n                        };\n                        console.log(values);\n                        axios.post(`http://43.204.210.119/api/admins/register`, values).then((response) => {\n                            console.log(response.data);\n                            swal(response.data.message, { icon: 'success' });\n                        });\n                    } catch (err) {\n                        swal(err.response.data.message || 'Something went wrong');\n                    }\n                }}\n            >\n                {({ handleBlur, handleChange, values, errors, handleSubmit, isSubmitting, touched }) => (\n                    <SubCard title=\"Create Bids\">\n                        <Grid container spacing={4}>\n                            <Grid item xs={12} md={6}>\n                                <TextField\n                                    name=\"name\"\n                                    error={errors.name}\n                                    onChange={handleChange('name')}\n                                    onBlur={() => handleBlur('name')}\n                                    helperText={errors.name}\n                                    fullWidth\n                                    value={values.name}\n                                    id=\"name\"\n                                    label=\"Name of the Bid *\"\n                                    variant=\"outlined\"\n                                    color=\"secondary\"\n                                    margin=\"dense\"\n                                />\n                                <TextField\n                                    name=\"totalAmount\"\n                                    error={errors.totalAmount}\n                                    onChange={handleChange('totalAmount')}\n                                    onBlur={() => handleBlur('totalAmount')}\n                                    helperText={errors.totalAmount}\n                                    fullWidth\n                                    value={values.totalAmount}\n                                    id=\"totalAmount\"\n                                    label=\"Total Amount *\"\n                                    variant=\"outlined\"\n                                    color=\"secondary\"\n                                    margin=\"normal\"\n                                />\n                            </Grid>\n                            <Grid item xs={12} md={6}>\n                                <TextField\n                                    name=\"Description\"\n                                    error={errors.description}\n                                    onChange={handleChange('description')}\n                                    onBlur={() => handleBlur('description')}\n                                    helperText={errors.description}\n                                    fullWidth\n                                    multiline\n                                    rows={5}\n                                    value={values.description}\n                                    id=\"description\"\n                                    label=\"Description*\"\n                                    variant=\"outlined\"\n                                    color=\"secondary\"\n                                />\n                            </Grid>\n                            <Grid item xs={12} md={6}>\n                                <TextField\n                                    name=\"minBid\"\n                                    error={errors.minBid}\n                                    onChange={handleChange('minBid')}\n                                    onBlur={() => handleBlur('minBid')}\n                                    helperText={errors.minBid}\n                                    fullWidth\n                                    defaultValue={values.bidAmout.min}\n                                    id=\"minBid\"\n                                    label=\"Minimum Bid *\"\n                                    variant=\"outlined\"\n                                    color=\"secondary\"\n                                />\n                            </Grid>\n                            <Grid item xs={12} md={6}>\n                                <TextField\n                                    name=\"maxBid\"\n                                    error={errors.maxBid}\n                                    onChange={handleChange('maxBid')}\n                                    onBlur={() => handleBlur('maxBid')}\n                                    helperText={errors.maxBid}\n                                    fullWidth\n                                    defaultValue={values.bidAmout.max}\n                                    id=\"maxBid\"\n                                    label=\"Maximum Bid *\"\n                                    variant=\"outlined\"\n                                    color=\"secondary\"\n                                />\n                            </Grid>\n                            <Grid item xs={12} md={6}>\n                                <TextField\n                                    name=\"tenure\"\n                                    error={errors.tenure}\n                                    onChange={handleChange('tenure')}\n                                    onBlur={() => handleBlur('tenure')}\n                                    helperText={errors.tenure}\n                                    fullWidth\n                                    value={values.tenure}\n                                    id=\"tenure\"\n                                    label=\"Tenure *\"\n                                    variant=\"outlined\"\n                                    color=\"secondary\"\n                                />\n                            </Grid>\n                            <Grid item xs={12} md={6}>\n                                Time Duration Start Time by User *\n                                <TextField\n                                    name=\"startTime\"\n                                    error={errors.startTime}\n                                    onChange={handleChange('startTime')}\n                                    onBlur={() => handleBlur('startTime')}\n                                    helperText={errors.startTime}\n                                    fullWidth\n                                    defaultValue={values.biddingTimePeriod.start}\n                                    id=\"startTime\"\n                                    label=\"\"\n                                    variant=\"outlined\"\n                                    color=\"secondary\"\n                                    type=\"datetime-local\"\n                                />\n                            </Grid>\n                            <Grid item xs={12} md={6}>\n                                Time Duration End Time by User *\n                                <TextField\n                                    name=\"endTime\"\n                                    error={errors.endTime}\n                                    onChange={handleChange('endTime')}\n                                    onBlur={() => handleBlur('endTime')}\n                                    helperText={errors.endTime}\n                                    fullWidth\n                                    defaultValue={values.biddingTimePeriod.end}\n                                    id=\"endTime\"\n                                    label=\"\"\n                                    variant=\"outlined\"\n                                    color=\"secondary\"\n                                    type=\"datetime-local\"\n                                />\n                            </Grid>\n                            <Grid item xs={12} md={6}>\n                                Date & Time for Declaration *\n                                <TextField\n                                    name=\"declaration\"\n                                    error={errors.declaration}\n                                    onChange={handleChange('declaration')}\n                                    onBlur={() => handleBlur('declaration')}\n                                    helperText={errors.declaration}\n                                    fullWidth\n                                    value={values.declaration}\n                                    id=\"declaration\"\n                                    label=\"\"\n                                    variant=\"outlined\"\n                                    color=\"secondary\"\n                                    type=\"datetime-local\"\n                                />\n                            </Grid>\n                        </Grid>\n                        <Divider />\n                        {/* <Box sx={{ mt: 4, mx: 2, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}> */}\n                        <Button\n                            sx={{ mt: 4, alignItems: 'center' }}\n                            onClick={handleSubmit}\n                            variant=\"contained\"\n                            endIcon={<IconArrowRight />}\n                            color=\"secondary\"\n                            disabled={isSubmitting}\n                        >\n                            Create\n                        </Button>\n                        {/* </Box> */}\n                    </SubCard>\n                )}\n            </Formik>\n            {/* </Box> */}\n        </>\n    );\n};\n\nexport default CreateBids;\n"],"sourceRoot":""}