{"version":3,"sources":["views/services/trading/EditFeature.jsx","views/services/trading/AddTrading.jsx","views/services/trading/trading.jsx"],"names":["style","position","top","left","maxWidth","maxHeight","overflow","transform","minWidth","bgcolor","borderRadius","boxShadow","p","EditFeature","handleClose","open","feature","useState","initialValues","setInitialValues","useEffect","overview","Modal","onClose","Box","sx","enableReinitialize","onSubmit","values","axios","put","then","response","console","log","data","swal","icon","setTimeout","catch","err","message","handleBlur","handleChange","errors","handleSubmit","isSubmitting","SubCard","title","Grid","container","spacing","item","xs","md","TextField","name","error","minimumInvestment","onChange","onBlur","helperText","fullWidth","value","id","label","variant","color","timeFrame","withdrawal","tradePoint","risk","Divider","mt","mx","display","justifyContent","alignItems","Button","onClick","startIcon","endIcon","disabled","validationSchema","Yup","branchId","required","capital","segment","type","reward","AddTrading","setIsUpdateTable","previousData","form","valId","_id","__v","created_at","updated_at","prevState","post","touched","tableData","column","useStyles","makeStyles","theme","actionsContainer","Trading","classes","loading","setLoading","service","setService","isUpdateTable","setOpen","searches","isSearch","setPreviousData","deleteData","setDeleteData","edit","setEdit","setFeature","handleOpen","get","features","list","delete","handleEditTrading","index","handleDelete","map","i","riskReward","action","className","IconButton","MainCard","width","float","margin","border","textAlign","lineHeight","fontWeight","marginTop","CircularProgress","secondary","size","length","m","CommonTable","setBanner"],"mappings":"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","file":"static/js/24.1aef944c.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/label-has-associated-control */\n/* eslint-disable react/prop-types */\nimport { Button, Divider, Grid, TextField } from '@mui/material';\nimport Box from '@mui/material/Box';\nimport Modal from '@mui/material/Modal';\nimport { IconArrowRight, IconX } from '@tabler/icons';\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport swal from 'sweetalert';\nimport SubCard from 'ui-component/cards/SubCard';\n\nconst style = {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    maxWidth: '98%',\n    maxHeight: '90vh',\n    overflow: 'auto',\n    transform: 'translate(-50%, -50%)',\n    minWidth: '50%',\n    bgcolor: 'background.paper',\n    borderRadius: '15px',\n    boxShadow: 24,\n    p: 4\n};\n\nconst EditFeature = ({ handleClose, open, feature }) => {\n    const [initialValues, setInitialValues] = useState({});\n\n    useEffect(() => {\n        setInitialValues({ ...feature, overview: 'testing update' });\n    }, [feature]);\n\n    return (\n        <>\n            <Modal open={open} onClose={handleClose} aria-labelledby=\"modal-modal-title\" aria-describedby=\"modal-modal-description\">\n                <Box sx={style}>\n                    <Formik\n                        initialValues={initialValues}\n                        enableReinitialize\n                        onSubmit={async (values) => {\n                            try {\n                                axios\n                                    .put(`http://43.204.210.119/api/overview/trading/update/62c42d0a7729bb047ee598d8`, values)\n                                    .then((response) => {\n                                        console.log(response.data);\n                                        swal('Successfully Update', { icon: 'success' });\n                                        setTimeout(() => {\n                                            handleClose();\n                                        }, 1000);\n                                    })\n                                    .catch((err) => console.log(err));\n                            } catch (err) {\n                                swal(err.response.data.message || 'Something went wrong');\n                            }\n                        }}\n                    >\n                        {({ handleBlur, handleChange, values, errors, handleSubmit, isSubmitting }) => (\n                            <SubCard title=\"Edit Holding Features\">\n                                <Grid container spacing={2}>\n                                    <Grid item xs={12} md={6}>\n                                        <TextField\n                                            name=\"minimumInvestment\"\n                                            error={errors.minimumInvestment}\n                                            onChange={handleChange('minimumInvestment')}\n                                            onBlur={() => handleBlur('minimumInvestment')}\n                                            helperText={errors.minimumInvestment}\n                                            fullWidth\n                                            value={values.minimumInvestment}\n                                            id=\"minimumInvestment\"\n                                            label=\"Min Investment *\"\n                                            variant=\"outlined\"\n                                            color=\"secondary\"\n                                        />\n                                    </Grid>\n                                    <Grid item xs={12} md={6}>\n                                        <TextField\n                                            name=\"timeFrame\"\n                                            error={errors.timeFrame}\n                                            onChange={handleChange('timeFrame')}\n                                            onBlur={() => handleBlur('timeFrame')}\n                                            helperText={errors.timeFrame}\n                                            fullWidth\n                                            value={values.timeFrame}\n                                            id=\"timeFrame\"\n                                            label=\"Time Frame *\"\n                                            variant=\"outlined\"\n                                            color=\"secondary\"\n                                        />\n                                    </Grid>\n                                    <Grid item xs={12} md={6}>\n                                        <TextField\n                                            name=\"withdrawal\"\n                                            error={errors.withdrawal}\n                                            onChange={handleChange('withdrawal')}\n                                            onBlur={() => handleBlur('withdrawal')}\n                                            helperText={errors.withdrawal}\n                                            fullWidth\n                                            value={values.withdrawal}\n                                            id=\"withdrawal\"\n                                            label=\"Withdrawal *\"\n                                            variant=\"outlined\"\n                                            color=\"secondary\"\n                                        />\n                                    </Grid>\n                                    <Grid item xs={12} md={6}>\n                                        <TextField\n                                            name=\"tradePoint\"\n                                            error={errors.tradePoint}\n                                            onChange={handleChange('tradePoint')}\n                                            onBlur={() => handleBlur('tradePoint')}\n                                            helperText={errors.tradePoint}\n                                            fullWidth\n                                            value={values.tradePoint}\n                                            id=\"tradePoint\"\n                                            label=\"Trade Profit*\"\n                                            variant=\"outlined\"\n                                            color=\"secondary\"\n                                        />\n                                    </Grid>\n                                    <Grid item xs={12} md={6}>\n                                        <TextField\n                                            name=\"risk\"\n                                            error={errors.risk}\n                                            onChange={handleChange('risk')}\n                                            onBlur={() => handleBlur('risk')}\n                                            helperText={errors.risk}\n                                            fullWidth\n                                            value={values.risk}\n                                            id=\"risk\"\n                                            label=\"Risk *\"\n                                            variant=\"outlined\"\n                                            color=\"secondary\"\n                                        />\n                                    </Grid>\n                                </Grid>\n                                <Divider />\n                                <Box sx={{ mt: 4, mx: 2, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                                    <Button onClick={handleClose} variant=\"outlined\" startIcon={<IconX />} color=\"secondary\">\n                                        Cancel\n                                    </Button>\n                                    <Button\n                                        onClick={handleSubmit}\n                                        variant=\"contained\"\n                                        endIcon={<IconArrowRight />}\n                                        color=\"secondary\"\n                                        disabled={isSubmitting}\n                                    >\n                                        Update\n                                    </Button>\n                                </Box>\n                            </SubCard>\n                        )}\n                    </Formik>\n                </Box>\n            </Modal>\n        </>\n    );\n};\n\nexport default EditFeature;\n","/* eslint-disable jsx-a11y/label-has-associated-control */\n/* eslint-disable react/prop-types */\nimport { Button, Divider, Grid, TextField, Switch, Typography } from '@mui/material';\nimport Box from '@mui/material/Box';\nimport Modal from '@mui/material/Modal';\nimport { IconArrowRight, IconX } from '@tabler/icons';\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport swal from 'sweetalert';\nimport SubCard from 'ui-component/cards/SubCard';\n\nconst style = {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    maxWidth: '98%',\n    maxHeight: '90vh',\n    overflow: 'auto',\n    transform: 'translate(-50%, -50%)',\n    minWidth: '50%',\n    bgcolor: 'background.paper',\n    borderRadius: '15px',\n    boxShadow: 24,\n    p: 4\n};\n\nconst validationSchema = Yup.object({\n    branchId: Yup.string().required('Branch ID is required'),\n    capital: Yup.string().required('Capital is required'),\n    segment: Yup.string().required('Segment is required'),\n    type: Yup.string().required('Type is required'),\n    risk: Yup.string().required('Risk is required'),\n    reward: Yup.string().required('Reward is required')\n});\n\nconst AddTrading = ({ handleClose, open, setIsUpdateTable, previousData }) => {\n    const [initialValues, setInitialValues] = useState({\n        branchId: '',\n        capital: '',\n        segment: '',\n        type: '',\n        risk: '',\n        reward: ''\n    });\n\n    useEffect(() => {\n        if (previousData) setInitialValues(previousData);\n        else\n            setInitialValues({\n                branchId: '',\n                capital: '',\n                segment: '',\n                type: '',\n                risk: '',\n                reward: ''\n            });\n    }, [previousData]);\n    /* eslint-disable no-underscore-dangle */\n\n    return (\n        <>\n            <Modal open={open} onClose={handleClose} aria-labelledby=\"modal-modal-title\" aria-describedby=\"modal-modal-description\">\n                <Box sx={style}>\n                    <Formik\n                        initialValues={initialValues}\n                        validationSchema={validationSchema}\n                        enableReinitialize\n                        onSubmit={async (values, form) => {\n                            const valId = values._id;\n                            delete values._id;\n                            delete values.__v;\n                            delete values.created_at;\n                            delete values.updated_at;\n                            console.log(values);\n                            if (previousData) {\n                                try {\n                                    axios\n                                        .put(`http://43.204.210.119/api/bids/trading/update/${valId}`, values)\n                                        .then((response) => {\n                                            console.log(response.data);\n                                            swal('Successfully Update', { icon: 'success' });\n                                            setIsUpdateTable((prevState) => !prevState);\n                                            setTimeout(() => {\n                                                handleClose();\n                                            }, 1000);\n                                        })\n                                        .catch((err) => console.log(err));\n                                } catch (err) {\n                                    swal(err.response.data.message || 'Something went wrong');\n                                }\n                            } else {\n                                try {\n                                    console.log(values);\n                                    axios\n                                        .post(`http://43.204.210.119/api/bids/trading/register`, values)\n                                        .then((response) => {\n                                            console.log(response.data);\n                                            swal('Successfully Added', { icon: 'success' });\n                                            setIsUpdateTable((prevState) => !prevState);\n                                            setTimeout(() => {\n                                                handleClose();\n                                            }, 1000);\n                                        })\n                                        .catch((err) => console.log(err));\n                                } catch (err) {\n                                    swal(err.response.data.message || 'Something went wrong');\n                                }\n                            }\n                        }}\n                    >\n                        {({ handleBlur, handleChange, values, errors, handleSubmit, isSubmitting, touched }) => (\n                            <SubCard title={previousData ? 'Update Trading' : 'Add Trading'}>\n                                <Grid container spacing={2}>\n                                    <Grid item xs={12} md={6}>\n                                        <TextField\n                                            name=\"branchId\"\n                                            error={errors.branchId}\n                                            onChange={handleChange('branchId')}\n                                            onBlur={() => handleBlur('branchId')}\n                                            helperText={errors.branchId}\n                                            fullWidth\n                                            value={values.branchId}\n                                            id=\"branchId\"\n                                            label=\"Branch ID *\"\n                                            variant=\"outlined\"\n                                            color=\"secondary\"\n                                        />\n                                    </Grid>\n                                    <Grid item xs={12} md={6}>\n                                        <TextField\n                                            name=\"capital\"\n                                            error={errors.capital}\n                                            onChange={handleChange('capital')}\n                                            onBlur={() => handleBlur('capital')}\n                                            helperText={errors.capital}\n                                            fullWidth\n                                            value={values.capital}\n                                            id=\"capital\"\n                                            label=\"Capital*\"\n                                            variant=\"outlined\"\n                                            color=\"secondary\"\n                                        />\n                                    </Grid>\n                                    <Grid item xs={12} md={6}>\n                                        <TextField\n                                            name=\"segment\"\n                                            error={errors.segment}\n                                            onChange={handleChange('segment')}\n                                            onBlur={() => handleBlur('segment')}\n                                            helperText={errors.segment}\n                                            fullWidth\n                                            value={values.segment}\n                                            id=\"segment\"\n                                            label=\"Segment *\"\n                                            variant=\"outlined\"\n                                            color=\"secondary\"\n                                        />\n                                    </Grid>\n                                    <Grid item xs={12} md={6}>\n                                        <TextField\n                                            name=\"type\"\n                                            error={errors.type}\n                                            onChange={handleChange('type')}\n                                            onBlur={() => handleBlur('type')}\n                                            helperText={errors.type}\n                                            fullWidth\n                                            value={values.type}\n                                            id=\"type\"\n                                            label=\"Type *\"\n                                            variant=\"outlined\"\n                                            color=\"secondary\"\n                                        />\n                                    </Grid>\n                                    <Grid item xs={12} md={6}>\n                                        <TextField\n                                            name=\"risk\"\n                                            error={errors.risk}\n                                            onChange={handleChange('risk')}\n                                            onBlur={() => handleBlur('risk')}\n                                            helperText={errors.risk}\n                                            fullWidth\n                                            value={values.risk}\n                                            id=\"risk\"\n                                            label=\"Risk *\"\n                                            variant=\"outlined\"\n                                            color=\"secondary\"\n                                        />\n                                    </Grid>\n                                    <Grid item xs={12} md={6}>\n                                        <TextField\n                                            name=\"reward\"\n                                            error={errors.reward}\n                                            onChange={handleChange('reward')}\n                                            onBlur={() => handleBlur('reward')}\n                                            helperText={errors.reward}\n                                            fullWidth\n                                            value={values.reward}\n                                            id=\"reward\"\n                                            label=\"Reward *\"\n                                            variant=\"outlined\"\n                                            color=\"secondary\"\n                                        />\n                                    </Grid>\n                                </Grid>\n                                <Divider />\n                                <Box sx={{ mt: 4, mx: 2, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                                    <Button onClick={handleClose} variant=\"outlined\" startIcon={<IconX />} color=\"secondary\">\n                                        Cancel\n                                    </Button>\n                                    <Button\n                                        onClick={handleSubmit}\n                                        variant=\"contained\"\n                                        endIcon={<IconArrowRight />}\n                                        color=\"secondary\"\n                                        disabled={isSubmitting}\n                                    >\n                                        {previousData ? 'Update' : 'Create'}\n                                    </Button>\n                                </Box>\n                            </SubCard>\n                        )}\n                    </Formik>\n                </Box>\n            </Modal>\n        </>\n    );\n};\n\nexport default AddTrading;\n","/* eslint-disable no-underscore-dangle */\nimport { useEffect, useState } from 'react';\nimport { Box, Button, CircularProgress, IconButton, Switch, FormControl, Select, MenuItem, TextField } from '@mui/material';\nimport { IconEdit, IconTrash, IconPlus } from '@tabler/icons';\nimport { format } from 'date-fns';\n\nimport config from 'config';\nimport MainCard from 'ui-component/cards/MainCard';\nimport SubCard from 'ui-component/cards/SubCard';\nimport CommonTable from 'ui-component/Table/CommonTable';\nimport EditFeature from './EditFeature';\nimport AddTrading from './AddTrading';\nimport swal from 'sweetalert';\nimport DropDown from 'ui-component/Table/CustomDropDown';\nimport { makeStyles } from '@mui/styles';\nimport axios from 'axios';\n\nlet tableData = [];\nconst column = ['Sl. No', 'Branch ID', 'Capital', 'Segment', 'Type', 'Risk | Reward', 'Action'];\n\nconst useStyles = makeStyles((theme) => ({\n    actionsContainer: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'end'\n    }\n}));\n\nconst Trading = () => {\n    const classes = useStyles();\n    const [active, setActive] = useState(true);\n    const [loading, setLoading] = useState(true);\n    const [service, setService] = useState([]);\n    const [isUpdateTable, setIsUpdateTable] = useState(false);\n    const [open, setOpen] = useState(false);\n    const [searches, setSearches] = useState([]);\n    const [isSearch, setIsSearch] = useState(false);\n    const [previousData, setPreviousData] = useState([null]);\n    const [checked, setChecked] = useState(false);\n    const [deleteData, setDeleteData] = useState(false);\n    const [edit, setEdit] = useState('');\n    const [feature, setFeature] = useState({\n        minimumInvestment: '',\n        timeFrame: '',\n        withdrawal: '',\n        tradePoint: '',\n        risk: ''\n    });\n    const handleOpen = () => {\n        setPreviousData(null);\n        setOpen(true);\n    };\n    const handleClose = () => setOpen(false);\n    useEffect(() => {\n        axios\n            .get(`http://43.204.210.119/api/overview/trading/62c42d0a7729bb047ee598d8`)\n            .then((response) => {\n                setLoading(false);\n                setFeature({\n                    minimumInvestment: response.data.overview.features.minimumInvestment,\n                    timeFrame: response.data.overview.features.timeFrame,\n                    withdrawal: response.data.overview.features.withdrawal,\n                    tradePoint: response.data.overview.features.tradePoint,\n                    risk: response.data.overview.features.risk\n                });\n            })\n            .catch((err) => console.log(err));\n    });\n\n    useEffect(() => {\n        setLoading(true);\n        axios\n            .get(`http://43.204.210.119/api/bids/trading`)\n            .then((response) => {\n                setLoading(false);\n                setService(response.data.list);\n            })\n            .catch((err) => console.log(err));\n    }, [isUpdateTable]);\n\n    useEffect(() => {\n        /* eslint-disable no-underscore-dangle */\n        console.log(deleteData._id);\n        axios\n            .delete(`http://43.204.210.119/api/bids/trading/delete/${deleteData._id}`)\n            .then((response) => {\n                setLoading(false);\n                swal('Successfully Delete', { icon: 'success' });\n                setIsUpdateTable((prevState) => !prevState);\n                console.log(`Delete Successfully`);\n            })\n            .catch((err) => console.log(err));\n    }, [deleteData]);\n\n    const data = isSearch ? searches : service;\n\n    const handleEditTrading = (index) => {\n        handleOpen();\n        console.log(previousData);\n        setPreviousData(service[index]);\n        setEdit('');\n    };\n\n    const handleDelete = (index) => {\n        setDeleteData(service[index]);\n    };\n\n    const handleEditFeature = () => {\n        handleOpen();\n        setFeature(feature);\n        setEdit('feature');\n    };\n\n    tableData = data?.map((service, i) => ({\n        id: i + 1,\n        branchId: service?.branchId,\n        capital: service?.capital,\n        segment: service?.segment,\n        type: service?.type,\n        riskReward: `${service?.risk} | ${service?.reward}`,\n        action: (\n            <div className={classes.actionsContainer}>\n                <IconButton title=\"Edit\" onClick={() => handleEditTrading(i)}>\n                    <IconEdit />\n                </IconButton>\n                <IconButton title=\"Delete\" onClick={() => handleDelete(i)}>\n                    <IconTrash />\n                </IconButton>\n            </div>\n        )\n    }));\n\n    return (\n        <>\n            {edit === 'feature' && <EditFeature handleClose={handleClose} open={open} feature={feature} />}\n            {edit === '' && (\n                <AddTrading handleClose={handleClose} open={open} setIsUpdateTable={setIsUpdateTable} previousData={previousData} />\n            )}\n            <div>\n                <MainCard title=\"Trading Service\">\n                    <SubCard>\n                        <Box style={{ width: '48%', float: 'left', margin: '1%' }}>\n                            <h3 style={{ color: '#5e35b1' }}>Overview</h3>\n                            <hr style={{ border: '0.2px solid #d6d4d4' }} />\n                            <p style={{ textAlign: 'justify', lineHeight: '25px' }}>\n                                PRO-Daily is the intraday/swing based trade management service where the clients can enjoy the profit in\n                                their trade account. We do research based trade only with your prior permission. you can see all trades in\n                                your mobile applications.\n                            </p>\n                        </Box>\n                        <Box style={{ width: '38%', float: 'left', margin: '1% 5%' }}>\n                            <h3 style={{ color: '#5e35b1' }}>Features</h3>\n                            <hr style={{ border: '0.2px solid #d6d4d4' }} />\n                            <p style={{ textAlign: 'justify', lineHeight: '25px', width: '40%', float: 'left', fontWeight: 'bold' }}>\n                                Min Investment <br />\n                                Time Frame <br />\n                                Withdrawal <br />\n                                Trade Profit <br />\n                                Risk\n                            </p>\n                            <p style={{ textAlign: 'justify', lineHeight: '25px', width: '59%', float: 'left' }}>\n                                : {feature.minimumInvestment} <br /> : {feature.timeFrame} <br /> : {feature.withdrawal} <br /> :{' '}\n                                {feature.tradePoint} <br /> : {feature.risk}\n                                <IconButton style={{ float: 'right' }} onClick={() => handleEditFeature()}>\n                                    <IconEdit />\n                                </IconButton>\n                            </p>\n                        </Box>\n                    </SubCard>\n                    <SubCard\n                        style={{ marginTop: '50px' }}\n                        title={loading ? <CircularProgress color=\"secondary\" /> : ' '}\n                        secondary={\n                            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                                <Button onClick={handleOpen} variant=\"contained\" color=\"secondary\" size=\"small\" startIcon={<IconPlus />}>\n                                    Add Trading\n                                </Button>\n                            </Box>\n                        }\n                    >\n                        {service.length <= 0 ? (\n                            <Box\n                                sx={{\n                                    display: 'flex',\n                                    justifyContent: 'center',\n                                    alignItems: 'center',\n                                    p: 1,\n                                    m: 1,\n                                    bgcolor: 'background.paper',\n                                    borderRadius: 1\n                                }}\n                            >\n                                <CircularProgress color=\"secondary\" />\n                            </Box>\n                        ) : (\n                            <CommonTable column={column} data={tableData} setBanner={setService} setIsUpdateTable={setIsUpdateTable} />\n                        )}\n                    </SubCard>\n                </MainCard>\n            </div>\n        </>\n    );\n};\n\nexport default Trading;\n"],"sourceRoot":""}